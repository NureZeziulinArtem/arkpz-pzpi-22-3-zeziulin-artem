   Харківський університет радіоелектроніки

         Факультет комп'ютерних наук

         Кафедра програмної інженерії




                     ЗВІТ

   до практичної роботи номер 1 з дисципліни

         "Аналіз та рефакторинг коду"

на тему: "Правила оформлення програмного коду"




                               Виконав ст. гр ПЗПІ-22-3

                               Зезюлін Артем Віталійович



                               Перевірив

                               ст. викладач катедри ПІ

                               Сокорчук Ігор Петрович




                 Харків 2024
                                                                             2

                                    1 МЕТА



     Ознайомитися з основними рекомендаціями щодо написання чистого,
ефективного та підтримуваного коду для різних мов програмування, а також
навчитися аналізувати та рефакторити код для покращення його якості.



                                    2 ВСТУП



     Для розгляду у ході виконання практичної роботи було обрано мову
програмування Python.

     Python — це високорівнева, універсальна мова програмування із простим та
зрозумілим синтаксисом. Вона використовується для швидкого та ефективного
вирішення завдань у різних галузях, включаючи веб-розробку та наукові
дослідження. Серед її головних особливостей можна відмітити використання
відступів для визначення блоків коду, динамічну типізацію, велику стандартну
бібліотеку та кросплатформеність.

     У рамках цієї роботи буде розглянуто стандарти та правила оформлення коду
на мові програмування Python. Дотримання цих стандартів сприятимеме
написанню читаємого, високопродуктивного та зручного для підтримки коду.
                                                                               3

                                      3 ХІД РОБОТИ



        Рекомендація: Використовуйте 4 пробіли для кожного рівня відступу

        Опис: Мова програмування Python використовує відступи як спосіб
виділення блоків коду, тому недотримання встановлених стандартів може
призвести до отримання неробочого коду.

        Приклад:
        # Поганий код
        if True:
        print("Відступ у 1 табуляцію")


        # Виправлений код
        if True:
           print("Відступ у 4 пробіли")




        Рекомендація: Зберігайте відступи при перенесенні частини коду на новий
рядок

        Опис: Якщо маємо справи з великою кількістю аргументів при виклику
функції та перенесенням їх частини на новий рядок, аргументи на другому рядку
мають знаходитися під аргументами на першому рядку. Якщо на першому рядку
аргументів немає, можна зробити відступ в один рівень. Якщо маємо справу з
визначенням функції, та її аргументи починаються з нового рядку, додайте ще один
додатковий рівень відступу.

        Приклад:
        # Поганий код
        def my_function(arg1, arg2,
        arg3, arg4):
           return arg1 + arg2 + arg3 + arg4
                                                                                        4

     # Виправлений код
     def my_function(arg1, arg2,
                       arg3, arg4):
           return arg1 + arg2 + arg3 + arg4




     Рекомендація: Віддавайте перевагу пробілам над табуляцією

     Опис: Табуляцію слід використовувати виключно для того, щоб зберегти
узгодженість з кодом, який вже використовує табуляції для організації відступів.
Python не дозволяє змішувати табуляцію та пробіли для відступів.

     Приклад:

     # Поганий код
     if True:
             print("Змішані відступи табуляцією та пробілами")


     # Виправлений код
     if True:
           print("Використано лише пробіли для відступу")




     Рекомендація: Ліміт довжини строки – 79 символів. Для документації та
коментарів – 72 символи.

     Опис: Працювати з більш довгими рядками незручно. Разом із збільшенням
зручності, обмеження довжини рядків дозволяє зменшити вікно розробки та мати
декілька відкритих файлів одночасно.

     Приклад:
     # Поганий код
      very_long_variable_name = "Це    дуже   довгий   рядок,   який   значно   перевищує
рекомендований ліміт у 79 символів"


     # Виправлений код
     very_long_variable_name = (
           "Це дуже довгий рядок, який розділено на кілька частин для зручності
читання"
                                                                                5

        )




        Рекомендація: Виконуйте перенесення перед бінарними операторами

        Опис: У Python допустимо робити розрив і до, і після бінарного оператора,
але виконання перенесення до бінарного оператору вважається більш зручним та
читабельним.

        Приклад:
        # Поганий код
        result = 10 + 20 +
        30


        # Виправлений код
        result = 10 + 20 \
             + 30




        Рекомендація: Використовуйте порожні рядки для логічного розділення
коду.

        Опис: Оточуйте визначення функцій і класів верхнього рівня двома
порожніми рядками, а визначення методів всередині класу – одним порожнім
рядком. Додаткові порожні рядки можна використовувати (економно) для
відокремлення груп пов'язаних функцій. Порожні рядки у функціях слід
використовувати (економно) для позначення логічних секцій.

        Приклад:

        # Поганий код
        def function_one():
             pass
        def function_two():
             pass


        # Виправлений код
                                                                           6

     def function_one():
          pass


     def function_two():
          pass




     Рекомендація: Дотримуйтеся правил форматування імпортів

     Опис: Кожний імпорт, як правило, пишеться на новому рядку, вони завжди
розміщуються у верхній частині файлу одразу після модульних коментарів та
документації, а також перед глобальними змінами та константами модуля.

     Імпорт слід групувати у наступному порядку:

     1.     Стандартний бібліотечний імпорт.
     2.     Пов'язані сторонні імпортні модулі.
     3.     Специфічні для локальної програми/бібліотеки імпортні дані.

     Між кожною групою імпорту слід залишати порожній рядок.

     Приклад:
     # Поганий код
     import sys, os
     from custom_package import *


     # Виправлений код
     import os
     import sys


     from custom_package import specific_function




     Рекомендація: Уникайте використання імпорту із символом зірочки (*)

     Опис: Замість from module import * вказуйте необхідні імпорти явно, щоб
підвищити зрозумілість коду та уникнути конфліктів у просторі імен.
                                                                                 7

      Приклад:
      # Поганий код
      from math import *


      # Виправлений код
      from math import sqrt, pi




      Рекомендація: Не перебільшуйте з використанням пробілів

      Опис: Уникайте використання пробілів у наступних випадках:

      –       Безпосередньо всередині круглих, квадратних та фігурних дужок;
      –       Між висячою комою і наступною закритою круглою дужкою;
      –       Безпосередньо перед комою, крапкою з комою або двокрапкою (окрім
випадків, де двокрапка діє як бінарний оператор);
      –       Безпосередньо   перед   відкриваючою    круглою   дужкою    списку
аргументів при виклику функції;
      –       Безпосередньо   перед   відкриваючою    квадратною   дужкою      при
індексації;
      –       Використання більше, ніж 1 пробілу навкруги операторів.

      Приклад:

      # Поганий код
      my_list = [ 1, 2, 3 ]
      result = ( 10 + 20 )


      # Виправлений код
      my_list = [1, 2, 3]
      result = (10 + 20)




      Рекомендація: Використовуйте пробіли, коли вони потрібні
                                                                              8

     Опис: Завжди оточуйте одним пробілом з обох боків такі бінарні оператори,
як присвоювання, комбіноване присвоювання (+=, -=, тощо), порівняння та булеві
оператори. Якщо при використанні інших операторів з різними пріоритетами,
можливим є додавання пробілів навколо операторів з найнижчим пріоритетом. При
цьому ніколи не використовуйте більше одного пробілу і завжди залишайте
однакову кількість пробілів з обох боків бінарного оператора.

     Приклад:
     # Поганий код
     x=10+5*2


     # Виправлений код
     x = 10 + 5*2




     Рекомендація: Одна інструкція на рядок

     Опис: Використання складених інструкцій, тобто кількох інструкцій в
одному рядку, як правило, не рекомендується.

     Приклад:
     # Поганий код
     x = 5; y = 10


     # Виправлений код
     x = 5
     y = 10




     Рекомендація: Дотримуйтесь загальних правил написання коментарів

     Опис: Коментарі завжди мають відповідати поточній версії програми. Вони
повинні бути повними реченнями. Блокові коментарі зазвичай складаються з одного
або декількох абзаців, побудованих з повних речень, кожне з яких закінчується
                                                                             9

крапкою. У коментарях, що складаються з кількох речень, слід залишати один або
два пробіли після крапки в кінці речення, за винятком останнього речення.

      Приклад:

      # Поганий код
      # Змінна x
      x = 10


      # Виправлений код
      # Змінна x відповідає за зберігання кількості елементів
      x = 10




      Рекомендація: Документуйте код за допомогою рядків документації
(docstrings)

      Опис: Функції, класи та модулі повинні включати docstrings, які описують
їхню мету та спосіб використання.

      Приклад:

      # Поганий код
      def calculate_area(radius):
          return 3.14 * radius ** 2


      # Виправлений код
      def calculate_area(radius):
          """
          Calculate the area of a circle given its radius.


          Args:
                radius (float): The radius of the circle.


          Returns:
                float: The area of the circle.
          """
          return 3.14 * radius ** 2
                                                                               10




     Рекомендація: Використовуйте короткі lowercase назви модулів та пакетів

     Опис: Модулі повинні мати короткі lowercase імена. У назві модуля можна
використовувати підкреслення, якщо це покращує читабельність. Пакети в Python
також повинні мати короткі імена у нижньому регістрі, хоча використання
підкреслень не рекомендується.

     Приклад:
     # Поганий код
     import MyCustomModule


     # Виправлений код
     import my_custom_module




     Рекомендація: Використовуйте PascaleCase для назв класів

     Приклад:

     # Поганий код
     class my_class:
         pass


     # Виправлений код
     class MyClass:
         pass




     Рекомендація: Використовуйте lowercase для назв функцій та змінних

     Опис:      Назви функцій    та   змінних   слід   писати малими літерами,
відокремлюючи слова підкресленням, якщо це необхідно для покращення
читабельності. Змішаний регістр (camelCase) дозволено використовувати лише у
випадках, де це вже є основним стилем іменування, для збереження зворотної
сумісності.
                                                                              11

     Приклад:
     # Поганий код
     def MyFunction():
         pass


     # Виправлений код
     def my_function():
         pass




     Рекомендація: Використовуйте UPPERCASE для назв констант

     Опис: Назви констант слід писати великими літерами, відокремлюючи слова
підкресленням.

     Приклад:

     # Поганий код
     pi = 3.14159


     # Виправлений код
     PI = 3.14159




     Рекомендація: Уникайте проблемні імена змінних

     Опис: Ніколи не використовуйте символи 'l' (мала латинська л), 'O' (велика
літера о) або 'I' (велика латинська i) як односимвольні імена змінних – у деяких
шрифтах ці символи не відрізняються від цифр один і нуль.

     Приклад:
     # Поганий код
     l = 10


     # Виправлений код
     length = 10
                                                                             12

      Рекомендація: Використовуйте описові та зрозумілі імена змінних і функцій

      Опис: Змінні та функції повинні чітко відображати свою мету.

      Приклад:

      # Поганий код
      def do_stuff(a, b):
          return a + b


      # Виправлений код
      def calculate_total(price, tax):
          return price + tax




      Рекомендація: Використовуйте is та is not для порівняння з екземплярами
класів-сінглтонів

      Опис: Порівняння з сингленами на кшталт None завжди слід робити за
допомогою операторів is або is not, а не операторів рівності.

      Приклад:

      # Поганий код
      if value == None:
          pass


      # Виправлений код
      if value is None:
          pass




      Рекомендація: Використовуйте is not, а не not ... is

      Опис: Хоча обидва вирази функціонально ідентичні, перший є більш
читабельним та зрозумілим.

      Приклад:
      # Поганий код
                                                                            13

     if not value is None:
         pass


     # Виправлений код
     if value is not None:
         pass




     Рекомендація: Завжди використовуйте інструкцію def замість інструкції
присвоювання лямбда-виразу

     Опис:      Використання    оператора   присвоювання   усуває   можливість
вбудовування лямбда-виразу всередину іншого, більшого виразу.

     Приклад:

     # Поганий код
     add = lambda x, y: x + y


     # Виправлений код
     def add(x, y):
         return x + y




     Рекомендація: Уникайте використання змінюваних об’єктів як змінних за
замовчуванням

     Опис: Змінювані об’єкти, такі як списки чи словники, не слід
використовувати як аргументи за замовчуванням, оскільки це може призвести до
неочікуваної поведінки.

     Приклад:
     # Поганий код
     def append_to_list(value, lst=[]):
         lst.append(value)
         return lst


     # Виправлений код
                                                                                 14

     def append_to_list(value, lst=None):
         if lst is None:
             lst = []
         lst.append(value)
         return lst




     Рекомендація: Використовуйте менеджери контексту для керування
ресурсами

     Опис: Для роботи з файлами чи ресурсами використовуйте оператор with,
щоб забезпечити коректне завершення роботи.

     Приклад:
     # Поганий код
     file = open('example.txt', 'r')
     content = file.read()
     file.close()


     # Виправлений код
     with open('example.txt', 'r') as file:
         content = file.read()




     Рекомендація: При обробці винятків, вказуйте конкретні типи винятків,
замість використання пустого виразу except

     Опис:    Пустий       вираз   except:   перехоплює   винятки   SystemExit    і
KeyboardInterrupt, що ускладнює переривання програми за допомогою Control-C, а
також може маскувати інші проблеми. Якщо ви хочете перехопити всі винятки, які
сигналізують про помилки у програмі, використовуйте except Exception:.

     Приклад:

     # Поганий код
     try:
         x = 1 / 0
                                                                                 15

      except:
          print("Error")


      # Виправлений код
      try:
          x = 1 / 0
      except ZeroDivisionError:
          print("Division by zero is not allowed")




      Рекомендація: Функція або щось повертає, або нічого не повертає

      Опис: Або всі оператори return у функції повинні повертати вираз, або жоден
з них не повинен. Якщо будь-який оператор return повертає вираз, всі оператори
return, де значення не повертається, повинні явно вказувати на це як return None, і
явний оператор повернення повинен бути присутнім в кінці функції (якщо його
можна дістатися).

      Приклад:
      # Поганий код
      def process_data(data):
          if not data:
                return
          return data.upper()


      # Виправлений код
      def process_data(data):

          if not data:

                return None

          return data.upper()




      Рекомендація: Для порівняння типів об'єктів завжди слід використовувати
isinstance(), а не порівняння типів напряму

      Приклад:
                                                                            16

     # Поганий код
     if type(x) == int:
         pass


     # Виправлений код
     if isinstance(x, int):
         pass




     Рекомендація: Не порівнюйте булеві значення з True або False за допомогою
оператора порівняння

     Приклад:

     # Поганий код
     if is_ready == True:
         pass


     # Виправлений код
     if is_ready:
         pass
                                                                              17

                                    ВИСНОВКИ



     В ході виконання практичної роботи було проведено дослідження основних
рекомендацій щодо написання чистого, ефективного та підтримуваного коду на
мові програмування Python. Було розглянуто рекомендації, пов’язані із структурою
файлів та коду загалом, використанням пробілів, переносів та коментарів,
грамотним використанням стилів іменування, а також певні практики написання
надійного та зрозумілого коду.
                                                                                18

                                       ДОДАТОК А

                        СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ



      1. PEP 8 – Style Guide for Python Code. Python Enhancement Proposals (PEPs).
URL: https://peps.python.org/pep-0008/ (date of access: 25.12.2024).
                                                 19

                               ДОДАТОК Б

                 ПОСИЛАННЯ НА ВІДЕО НА YOUTUBE



https://youtu.be/2kdkbI7eUFg
              20

 ДОДАТОК В

ПРЕЗЕНТАЦІЯ
21
22
23
24
25
26
27
28
29
30
