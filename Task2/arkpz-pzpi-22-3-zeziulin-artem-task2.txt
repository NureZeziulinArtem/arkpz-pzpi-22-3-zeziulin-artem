Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії







ЗВІТ
до лабораторної роботи номер 2 з дисципліни
"Аналіз та рефакторинг коду"
на тему: " Розробка бази даних для серверної частини програмної системи та прикладного програмного інтерфейсу (API)"




                                   Виконав ст. гр ПЗПІ-22-3
                                   Зезюлін Артем Віталійович
                                   
                                   Перевірив
                                             ст. викладач катедри ПІ 
                                               Сокорчук Ігор Петрович
                                    



Харків 2024
1 МЕТА

	Розробити базу даних для серверної частини  програмної системи для формування рекомендацій по вирощуванню рослин та прикладний програмний інтерфейс для неї.

2 ХІД РОБОТИ

	Під час виконання лабораторної роботи для програмної системи для формування рекомендацій по вирощуванню рослин було побудовано UML діаграми прецедентів (див. Додаток А) та ER-діаграму бази даних (див. Додаток Б). Після цього відповідну базу даних було створено. Для неї, за допомогою SQL Server Management Studio, було згенеровано діаграму її структури (див. Додаток В). Оскільки для подальшої реалізації управління сесіями вирішено було використовувати Microsoft Identity, фінальна структура бази даних трохи відрізняється від запланованої. 
     Далі для програмної системи було розроблено API та функції роботи з базою даних (використано ORM Entity Framework). Для розробленого API було сформовано специфікацію за допомогою Swagger (див. Додаток Г).



ВИСНОВКИ

     В ході виконання лабораторної роботи було створено:
     - UML діаграми прецедентів;
     - ER-діаграму бази даних;
     - Базу даних;
     - Діаграму структури бази даних;
     - Функціонал взаємодії з базою даних;
     - API для взаємодії серверної частини з клієнтами;
     - Специфікацію API. 


ДОДАТОК А
UML ДІАГРАМА ПРЕЦЕДЕНТІВ


Рисунок А.1 - UML діаграма прецедентів (частина 1)


Рисунок А.2 - UML діаграма прецедентів (частина 2)

Рисунок А.3 - UML діаграма прецедентів (частина 3)


ДОДАТОК Б 
ER ДІАГРАМА БАЗИ ДАНИХ
     

Рисунок Б.1 - ER діаграма бази даних



ДОДАТОК В 
ДІАГРАМА СТРУКТУРИ БАЗИ ДАНИХ


     Рисунок В.1 - Діаграма структури бази даних (додаткові таблиці Identity не відображено)
     


ДОДАТОК Г
СПЕЦИФІКАЦІЯ API
     
       1 {
       2   "openapi": "3.0.1",
       3   "info": {
       4     "title": "GardeningAdviceSystem",
       5     "version": "1.0"
       6   },
       7   "paths": {
       8     "/api/Account": {
       9       "get": {
       10         "tags": [
       11           "Account"
       12         ],
       13         "responses": {
       14           "200": {
       15             "description": "Success"
       16           }
       17         }
       18       }
       19     },
       20     "/api/Account/register": {
       21       "post": {
       22         "tags": [
       23           "Account"
       24         ],
       25         "requestBody": {
       26           "content": {
       27             "application/json": {
       28               "schema": {
       29                 "$ref": "#/components/schemas/RegisterModel"
       30               }
       31             },
       32             "text/json": {
       33               "schema": {
       34                 "$ref": "#/components/schemas/RegisterModel"
       35               }
       36             },
       37             "application/*+json": {
       38               "schema": {
       39                 "$ref": "#/components/schemas/RegisterModel"
       40               }
       41             }
       42           }
       43         },
       44         "responses": {
       45           "200": {
       46             "description": "Success"
       47           }
       48         }
       49       }
       50     },
       51     "/api/Account/login": {
       52       "post": {
       53         "tags": [
       54           "Account"
       55         ],
       56         "requestBody": {
       57           "content": {
       58             "application/json": {
       59               "schema": {
       60                 "$ref": "#/components/schemas/LoginModel"
       61               }
       62             },
       63             "text/json": {
       64               "schema": {
       65                 "$ref": "#/components/schemas/LoginModel"
       66               }
       67             },
       68             "application/*+json": {
       69               "schema": {
       70                 "$ref": "#/components/schemas/LoginModel"
       71               }
       72             }
       73           }
       74         },
       75         "responses": {
       76           "200": {
       77             "description": "Success"
       78           }
       79         }
       80       }
       81     },
       82     "/api/Account/logout": {
       83       "post": {
       84         "tags": [
       85           "Account"
       86         ],
       87         "responses": {
       88           "200": {
       89             "description": "Success"
       90           }
       91         }
       92       }
       93     },
       94     "/api/Account/edit": {
       95       "put": {
       96         "tags": [
       97           "Account"
       98         ],
       99         "requestBody": {
       100           "content": {
       101             "application/json": {
       102               "schema": {
       103                 "$ref": "#/components/schemas/EditAccountModel"
       104               }
       105             },
       106             "text/json": {
       107               "schema": {
       108                 "$ref": "#/components/schemas/EditAccountModel"
       109               }
       110             },
       111             "application/*+json": {
       112               "schema": {
       113                 "$ref": "#/components/schemas/EditAccountModel"
       114               }
       115             }
       116           }
       117         },
       118         "responses": {
       119           "200": {
       120             "description": "Success"
       121           }
       122         }
       123       }
       124     },
       125     "/api/Account/change-password": {
       126       "put": {
       127         "tags": [
       128           "Account"
       129         ],
       130         "requestBody": {
       131           "content": {
       132             "application/json": {
       133               "schema": {
       134                 "$ref": "#/components/schemas/ChangePasswordModel"
       135               }
       136             },
       137             "text/json": {
       138               "schema": {
       139                 "$ref": "#/components/schemas/ChangePasswordModel"
       140               }
       141             },
       142             "application/*+json": {
       143               "schema": {
       144                 "$ref": "#/components/schemas/ChangePasswordModel"
       145               }
       146             }
       147           }
       148         },
       149         "responses": {
       150           "200": {
       151             "description": "Success"
       152           }
       153         }
       154       }
       155     },
       156     "/api/Device/create": {
       157       "post": {
       158         "tags": [
       159           "Device"
       160         ],
       161         "requestBody": {
       162           "content": {
       163             "application/json": {
       164               "schema": {
       165                 "$ref": "#/components/schemas/CreateDeviceModel"
       166               }
       167             },
       168             "text/json": {
       169               "schema": {
       170                 "$ref": "#/components/schemas/CreateDeviceModel"
       171               }
       172             },
       173             "application/*+json": {
       174               "schema": {
       175                 "$ref": "#/components/schemas/CreateDeviceModel"
       176               }
       177             }
       178           }
       179         },
       180         "responses": {
       181           "200": {
       182             "description": "Success"
       183           }
       184         }
       185       }
       186     },
       187     "/api/Device/edit": {
       188       "put": {
       189         "tags": [
       190           "Device"
       191         ],
       192         "requestBody": {
       193           "content": {
       194             "application/json": {
       195               "schema": {
       196                 "$ref": "#/components/schemas/EditDeviceModel"
       197               }
       198             },
       199             "text/json": {
       200               "schema": {
       201                 "$ref": "#/components/schemas/EditDeviceModel"
       202               }
       203             },
       204             "application/*+json": {
       205               "schema": {
       206                 "$ref": "#/components/schemas/EditDeviceModel"
       207               }
       208             }
       209           }
       210         },
       211         "responses": {
       212           "200": {
       213             "description": "Success"
       214           }
       215         }
       216       }
       217     },
       218     "/api/Device/delete": {
       219       "delete": {
       220         "tags": [
       221           "Device"
       222         ],
       223         "parameters": [
       224           {
       225             "name": "id",
       226             "in": "query",
       227             "schema": {
       228               "type": "integer",
       229               "format": "int32"
       230             }
       231           }
       232         ],
       233         "responses": {
       234           "200": {
       235             "description": "Success"
       236           }
       237         }
       238       }
       239     },
       240     "/api/Device": {
       241       "get": {
       242         "tags": [
       243           "Device"
       244         ],
       245         "responses": {
       246           "200": {
       247             "description": "Success"
       248           }
       249         }
       250       }
       251     },
       252     "/api/Device/{id}": {
       253       "get": {
       254         "tags": [
       255           "Device"
       256         ],
       257         "parameters": [
       258           {
       259             "name": "id",
       260             "in": "path",
       261             "required": true,
       262             "schema": {
       263               "type": "integer",
       264               "format": "int32"
       265             }
       266           }
       267         ],
       268         "responses": {
       269           "200": {
       270             "description": "Success"
       271           }
       272         }
       273       }
       274     },
       275     "/api/Device/log-data": {
       276       "post": {
       277         "tags": [
       278           "Device"
       279         ],
       280         "requestBody": {
       281           "content": {
       282             "application/json": {
       283               "schema": {
       284                 "$ref": "#/components/schemas/CreateDeviceLogModel"
       285               }
       286             },
       287             "text/json": {
       288               "schema": {
       289                 "$ref": "#/components/schemas/CreateDeviceLogModel"
       290               }
       291             },
       292             "application/*+json": {
       293               "schema": {
       294                 "$ref": "#/components/schemas/CreateDeviceLogModel"
       295               }
       296             }
       297           }
       298         },
       299         "responses": {
       300           "200": {
       301             "description": "Success"
       302           }
       303         }
       304       }
       305     },
       306     "/api/Device/logs/{deviceId}": {
       307       "get": {
       308         "tags": [
       309           "Device"
       310         ],
       311         "parameters": [
       312           {
       313             "name": "deviceId",
       314             "in": "path",
       315             "required": true,
       316             "schema": {
       317               "type": "integer",
       318               "format": "int32"
       319             }
       320           }
       321         ],
       322         "responses": {
       323           "200": {
       324             "description": "Success"
       325           }
       326         }
       327       }
       328     },
       329     "/api/Device/predict": {
       330       "get": {
       331         "tags": [
       332           "Device"
       333         ],
       334         "parameters": [
       335           {
       336             "name": "type",
       337             "in": "query",
       338             "schema": {
       339               "$ref": "#/components/schemas/PredictionType"
       340             }
       341           },
       342           {
       343             "name": "deviceId",
       344             "in": "query",
       345             "schema": {
       346               "type": "integer",
       347               "format": "int32"
       348             }
       349           },
       350           {
       351             "name": "conciderDays",
       352             "in": "query",
       353             "schema": {
       354               "type": "integer",
       355               "format": "int32"
       356             }
       357           },
       358           {
       359             "name": "forDays",
       360             "in": "query",
       361             "schema": {
       362               "type": "integer",
       363               "format": "int32"
       364             }
       365           }
       366         ],
       367         "responses": {
       368           "200": {
       369             "description": "Success"
       370           }
       371         }
       372       }
       373     },
       374     "/api/Device/advice-plants": {
       375       "get": {
       376         "tags": [
       377           "Device"
       378         ],
       379         "parameters": [
       380           {
       381             "name": "deviceId",
       382             "in": "query",
       383             "schema": {
       384               "type": "integer",
       385               "format": "int32"
       386             }
       387           }
       388         ],
       389         "responses": {
       390           "200": {
       391             "description": "Success"
       392           }
       393         }
       394       }
       395     },
       396     "/api/Device/advice-for-plant": {
       397       "get": {
       398         "tags": [
       399           "Device"
       400         ],
       401         "parameters": [
       402           {
       403             "name": "deviceId",
       404             "in": "query",
       405             "schema": {
       406               "type": "integer",
       407               "format": "int32"
       408             }
       409           },
       410           {
       411             "name": "plantId",
       412             "in": "query",
       413             "schema": {
       414               "type": "integer",
       415               "format": "int32"
       416             }
       417           }
       418         ],
       419         "responses": {
       420           "200": {
       421             "description": "Success"
       422           }
       423         }
       424       }
       425     },
       426     "/api/Fertilizer/create": {
       427       "post": {
       428         "tags": [
       429           "Fertilizer"
       430         ],
       431         "requestBody": {
       432           "content": {
       433             "application/json": {
       434               "schema": {
       435                 "$ref": "#/components/schemas/CreateFertilizerModel"
       436               }
       437             },
       438             "text/json": {
       439               "schema": {
       440                 "$ref": "#/components/schemas/CreateFertilizerModel"
       441               }
       442             },
       443             "application/*+json": {
       444               "schema": {
       445                 "$ref": "#/components/schemas/CreateFertilizerModel"
       446               }
       447             }
       448           }
       449         },
       450         "responses": {
       451           "200": {
       452             "description": "Success"
       453           }
       454         }
       455       }
       456     },
       457     "/api/Fertilizer/edit": {
       458       "put": {
       459         "tags": [
       460           "Fertilizer"
       461         ],
       462         "requestBody": {
       463           "content": {
       464             "application/json": {
       465               "schema": {
       466                 "$ref": "#/components/schemas/EditFertilizerModel"
       467               }
       468             },
       469             "text/json": {
       470               "schema": {
       471                 "$ref": "#/components/schemas/EditFertilizerModel"
       472               }
       473             },
       474             "application/*+json": {
       475               "schema": {
       476                 "$ref": "#/components/schemas/EditFertilizerModel"
       477               }
       478             }
       479           }
       480         },
       481         "responses": {
       482           "200": {
       483             "description": "Success"
       484           }
       485         }
       486       }
       487     },
       488     "/api/Fertilizer/edit-image": {
       489       "put": {
       490         "tags": [
       491           "Fertilizer"
       492         ],
       493         "parameters": [
       494           {
       495             "name": "Id",
       496             "in": "query",
       497             "schema": {
       498               "type": "integer",
       499               "format": "int32"
       500             }
       501           }
       502         ],
       503         "requestBody": {
       504           "content": {
       505             "multipart/form-data": {
       506               "schema": {
       507                 "type": "object",
       508                 "properties": {
       509                   "ImageFile": {
       510                     "type": "string",
       511                     "format": "binary"
       512                   }
       513                 }
       514               },
       515               "encoding": {
       516                 "ImageFile": {
       517                   "style": "form"
       518                 }
       519               }
       520             }
       521           }
       522         },
       523         "responses": {
       524           "200": {
       525             "description": "Success"
       526           }
       527         }
       528       }
       529     },
       530     "/api/Fertilizer/delete": {
       531       "delete": {
       532         "tags": [
       533           "Fertilizer"
       534         ],
       535         "parameters": [
       536           {
       537             "name": "id",
       538             "in": "query",
       539             "schema": {
       540               "type": "integer",
       541               "format": "int32"
       542             }
       543           }
       544         ],
       545         "responses": {
       546           "200": {
       547             "description": "Success"
       548           }
       549         }
       550       }
       551     },
       552     "/api/Fertilizer/{id}": {
       553       "get": {
       554         "tags": [
       555           "Fertilizer"
       556         ],
       557         "parameters": [
       558           {
       559             "name": "id",
       560             "in": "path",
       561             "required": true,
       562             "schema": {
       563               "type": "integer",
       564               "format": "int32"
       565             }
       566           }
       567         ],
       568         "responses": {
       569           "200": {
       570             "description": "Success"
       571           }
       572         }
       573       }
       574     },
       575     "/api/Fertilizer/image/{id}": {
       576       "get": {
       577         "tags": [
       578           "Fertilizer"
       579         ],
       580         "parameters": [
       581           {
       582             "name": "id",
       583             "in": "path",
       584             "required": true,
       585             "schema": {
       586               "type": "integer",
       587               "format": "int32"
       588             }
       589           }
       590         ],
       591         "responses": {
       592           "200": {
       593             "description": "Success"
       594           }
       595         }
       596       }
       597     },
       598     "/api/Fertilizer": {
       599       "get": {
       600         "tags": [
       601           "Fertilizer"
       602         ],
       603         "responses": {
       604           "200": {
       605             "description": "Success"
       606           }
       607         }
       608       }
       609     },
       610     "/api/Fertilizer/cart": {
       611       "get": {
       612         "tags": [
       613           "Fertilizer"
       614         ],
       615         "responses": {
       616           "200": {
       617             "description": "Success"
       618           }
       619         }
       620       }
       621     },
       622     "/api/Fertilizer/cart-android": {
       623       "get": {
       624         "tags": [
       625           "Fertilizer"
       626         ],
       627         "parameters": [
       628           {
       629             "name": "userId",
       630             "in": "query",
       631             "schema": {
       632               "type": "string"
       633             }
       634           }
       635         ],
       636         "responses": {
       637           "200": {
       638             "description": "Success"
       639           }
       640         }
       641       }
       642     },
       643     "/api/Fertilizer/add-to-cart": {
       644       "post": {
       645         "tags": [
       646           "Fertilizer"
       647         ],
       648         "parameters": [
       649           {
       650             "name": "id",
       651             "in": "query",
       652             "schema": {
       653               "type": "integer",
       654               "format": "int32"
       655             }
       656           }
       657         ],
       658         "responses": {
       659           "200": {
       660             "description": "Success"
       661           }
       662         }
       663       }
       664     },
       665     "/api/Fertilizer/add-to-cart-android": {
       666       "post": {
       667         "tags": [
       668           "Fertilizer"
       669         ],
       670         "parameters": [
       671           {
       672             "name": "userId",
       673             "in": "query",
       674             "schema": {
       675               "type": "string"
       676             }
       677           },
       678           {
       679             "name": "fertilizerId",
       680             "in": "query",
       681             "schema": {
       682               "type": "integer",
       683               "format": "int32"
       684             }
       685           }
       686         ],
       687         "responses": {
       688           "200": {
       689             "description": "Success"
       690           }
       691         }
       692       }
       693     },
       694     "/api/Fertilizer/delete-from-cart": {
       695       "post": {
       696         "tags": [
       697           "Fertilizer"
       698         ],
       699         "parameters": [
       700           {
       701             "name": "id",
       702             "in": "query",
       703             "schema": {
       704               "type": "integer",
       705               "format": "int32"
       706             }
       707           }
       708         ],
       709         "responses": {
       710           "200": {
       711             "description": "Success"
       712           }
       713         }
       714       }
       715     },
       716     "/api/Fertilizer/delete-from-cart-android": {
       717       "post": {
       718         "tags": [
       719           "Fertilizer"
       720         ],
       721         "parameters": [
       722           {
       723             "name": "userId",
       724             "in": "query",
       725             "schema": {
       726               "type": "string"
       727             }
       728           },
       729           {
       730             "name": "fertilizerId",
       731             "in": "query",
       732             "schema": {
       733               "type": "integer",
       734               "format": "int32"
       735             }
       736           }
       737         ],
       738         "responses": {
       739           "200": {
       740             "description": "Success"
       741           }
       742         }
       743       }
       744     },
       745     "/api/Fertilizer/edit-cart-item": {
       746       "put": {
       747         "tags": [
       748           "Fertilizer"
       749         ],
       750         "requestBody": {
       751           "content": {
       752             "application/json": {
       753               "schema": {
       754                 "$ref": "#/components/schemas/EditCartItmeModel"
       755               }
       756             },
       757             "text/json": {
       758               "schema": {
       759                 "$ref": "#/components/schemas/EditCartItmeModel"
       760               }
       761             },
       762             "application/*+json": {
       763               "schema": {
       764                 "$ref": "#/components/schemas/EditCartItmeModel"
       765               }
       766             }
       767           }
       768         },
       769         "responses": {
       770           "200": {
       771             "description": "Success"
       772           }
       773         }
       774       }
       775     },
       776     "/api/Fertilizer/get-cart-notifications-android": {
       777       "get": {
       778         "tags": [
       779           "Fertilizer"
       780         ],
       781         "parameters": [
       782           {
       783             "name": "userId",
       784             "in": "query",
       785             "schema": {
       786               "type": "string"
       787             }
       788           }
       789         ],
       790         "responses": {
       791           "200": {
       792             "description": "Success"
       793           }
       794         }
       795       }
       796     },
       797     "/api/Plant/create": {
       798       "post": {
       799         "tags": [
       800           "Plant"
       801         ],
       802         "requestBody": {
       803           "content": {
       804             "application/json": {
       805               "schema": {
       806                 "$ref": "#/components/schemas/CreatePlantModel"
       807               }
       808             },
       809             "text/json": {
       810               "schema": {
       811                 "$ref": "#/components/schemas/CreatePlantModel"
       812               }
       813             },
       814             "application/*+json": {
       815               "schema": {
       816                 "$ref": "#/components/schemas/CreatePlantModel"
       817               }
       818             }
       819           }
       820         },
       821         "responses": {
       822           "200": {
       823             "description": "Success"
       824           }
       825         }
       826       }
       827     },
       828     "/api/Plant/edit": {
       829       "put": {
       830         "tags": [
       831           "Plant"
       832         ],
       833         "requestBody": {
       834           "content": {
       835             "application/json": {
       836               "schema": {
       837                 "$ref": "#/components/schemas/EditPlantModel"
       838               }
       839             },
       840             "text/json": {
       841               "schema": {
       842                 "$ref": "#/components/schemas/EditPlantModel"
       843               }
       844             },
       845             "application/*+json": {
       846               "schema": {
       847                 "$ref": "#/components/schemas/EditPlantModel"
       848               }
       849             }
       850           }
       851         },
       852         "responses": {
       853           "200": {
       854             "description": "Success"
       855           }
       856         }
       857       }
       858     },
       859     "/api/Plant/edit-image": {
       860       "put": {
       861         "tags": [
       862           "Plant"
       863         ],
       864         "parameters": [
       865           {
       866             "name": "Id",
       867             "in": "query",
       868             "schema": {
       869               "type": "integer",
       870               "format": "int32"
       871             }
       872           }
       873         ],
       874         "requestBody": {
       875           "content": {
       876             "multipart/form-data": {
       877               "schema": {
       878                 "type": "object",
       879                 "properties": {
       880                   "ImageFile": {
       881                     "type": "string",
       882                     "format": "binary"
       883                   }
       884                 }
       885               },
       886               "encoding": {
       887                 "ImageFile": {
       888                   "style": "form"
       889                 }
       890               }
       891             }
       892           }
       893         },
       894         "responses": {
       895           "200": {
       896             "description": "Success"
       897           }
       898         }
       899       }
       900     },
       901     "/api/Plant/delete": {
       902       "delete": {
       903         "tags": [
       904           "Plant"
       905         ],
       906         "parameters": [
       907           {
       908             "name": "id",
       909             "in": "query",
       910             "schema": {
       911               "type": "integer",
       912               "format": "int32"
       913             }
       914           }
       915         ],
       916         "responses": {
       917           "200": {
       918             "description": "Success"
       919           }
       920         }
       921       }
       922     },
       923     "/api/Plant/{id}": {
       924       "get": {
       925         "tags": [
       926           "Plant"
       927         ],
       928         "parameters": [
       929           {
       930             "name": "id",
       931             "in": "path",
       932             "required": true,
       933             "schema": {
       934               "type": "integer",
       935               "format": "int32"
       936             }
       937           }
       938         ],
       939         "responses": {
       940           "200": {
       941             "description": "Success"
       942           }
       943         }
       944       }
       945     },
       946     "/api/Plant/image/{id}": {
       947       "get": {
       948         "tags": [
       949           "Plant"
       950         ],
       951         "parameters": [
       952           {
       953             "name": "id",
       954             "in": "path",
       955             "required": true,
       956             "schema": {
       957               "type": "integer",
       958               "format": "int32"
       959             }
       960           }
       961         ],
       962         "responses": {
       963           "200": {
       964             "description": "Success"
       965           }
       966         }
       967       }
       968     },
       969     "/api/Plant": {
       970       "get": {
       971         "tags": [
       972           "Plant"
       973         ],
       974         "responses": {
       975           "200": {
       976             "description": "Success"
       977           }
       978         }
       979       }
       980     },
       981     "/api/Plant/by-user": {
       982       "get": {
       983         "tags": [
       984           "Plant"
       985         ],
       986         "responses": {
       987           "200": {
       988             "description": "Success"
       989           }
       990         }
       991       }
       992     },
       993     "/api/WateringReminder/create": {
       994       "post": {
       995         "tags": [
       996           "WateringReminder"
       997         ],
       998         "requestBody": {
       999           "content": {
       1000             "application/json": {
       1001               "schema": {
       1002                 "$ref": "#/components/schemas/CreateReminderModel"
       1003               }
       1004             },
       1005             "text/json": {
       1006               "schema": {
       1007                 "$ref": "#/components/schemas/CreateReminderModel"
       1008               }
       1009             },
       1010             "application/*+json": {
       1011               "schema": {
       1012                 "$ref": "#/components/schemas/CreateReminderModel"
       1013               }
       1014             }
       1015           }
       1016         },
       1017         "responses": {
       1018           "200": {
       1019             "description": "Success"
       1020           }
       1021         }
       1022       }
       1023     },
       1024     "/api/WateringReminder/edit": {
       1025       "put": {
       1026         "tags": [
       1027           "WateringReminder"
       1028         ],
       1029         "requestBody": {
       1030           "content": {
       1031             "application/json": {
       1032               "schema": {
       1033                 "$ref": "#/components/schemas/EditReminderModel"
       1034               }
       1035             },
       1036             "text/json": {
       1037               "schema": {
       1038                 "$ref": "#/components/schemas/EditReminderModel"
       1039               }
       1040             },
       1041             "application/*+json": {
       1042               "schema": {
       1043                 "$ref": "#/components/schemas/EditReminderModel"
       1044               }
       1045             }
       1046           }
       1047         },
       1048         "responses": {
       1049           "200": {
       1050             "description": "Success"
       1051           }
       1052         }
       1053       }
       1054     },
       1055     "/api/WateringReminder/delete": {
       1056       "delete": {
       1057         "tags": [
       1058           "WateringReminder"
       1059         ],
       1060         "parameters": [
       1061           {
       1062             "name": "id",
       1063             "in": "query",
       1064             "schema": {
       1065               "type": "integer",
       1066               "format": "int32"
       1067             }
       1068           }
       1069         ],
       1070         "responses": {
       1071           "200": {
       1072             "description": "Success"
       1073           }
       1074         }
       1075       }
       1076     },
       1077     "/api/WateringReminder/{id}": {
       1078       "get": {
       1079         "tags": [
       1080           "WateringReminder"
       1081         ],
       1082         "parameters": [
       1083           {
       1084             "name": "id",
       1085             "in": "path",
       1086             "required": true,
       1087             "schema": {
       1088               "type": "integer",
       1089               "format": "int32"
       1090             }
       1091           }
       1092         ],
       1093         "responses": {
       1094           "200": {
       1095             "description": "Success"
       1096           }
       1097         }
       1098       }
       1099     },
       1100     "/api/WateringReminder": {
       1101       "get": {
       1102         "tags": [
       1103           "WateringReminder"
       1104         ],
       1105         "responses": {
       1106           "200": {
       1107             "description": "Success"
       1108           }
       1109         }
       1110       }
       1111     },
       1112     "/api/WateringReminder/device/{deviceId}": {
       1113       "get": {
       1114         "tags": [
       1115           "WateringReminder"
       1116         ],
       1117         "parameters": [
       1118           {
       1119             "name": "deviceId",
       1120             "in": "path",
       1121             "required": true,
       1122             "schema": {
       1123               "type": "integer",
       1124               "format": "int32"
       1125             }
       1126           }
       1127         ],
       1128         "responses": {
       1129           "200": {
       1130             "description": "Success"
       1131           }
       1132         }
       1133       }
       1134     }
       1135   },
       1136   "components": {
       1137     "schemas": {
       1138       "ChangePasswordModel": {
       1139         "type": "object",
       1140         "properties": {
       1141           "oldPassword": {
       1142             "type": "string",
       1143             "nullable": true
       1144           },
       1145           "newPassword": {
       1146             "type": "string",
       1147             "nullable": true
       1148           },
       1149           "confirmNewPassword": {
       1150             "type": "string",
       1151             "nullable": true
       1152           }
       1153         },
       1154         "additionalProperties": false
       1155       },
       1156       "CreateDeviceLogModel": {
       1157         "type": "object",
       1158         "properties": {
       1159           "ph": {
       1160             "type": "number",
       1161             "format": "float"
       1162           },
       1163           "moisture": {
       1164             "type": "integer",
       1165             "format": "int32"
       1166           },
       1167           "deviceId": {
       1168             "type": "integer",
       1169             "format": "int32"
       1170           }
       1171         },
       1172         "additionalProperties": false
       1173       },
       1174       "CreateDeviceModel": {
       1175         "type": "object",
       1176         "properties": {
       1177           "name": {
       1178             "type": "string",
       1179             "nullable": true
       1180           },
       1181           "description": {
       1182             "type": "string",
       1183             "nullable": true
       1184           }
       1185         },
       1186         "additionalProperties": false
       1187       },
       1188       "CreateFertilizerModel": {
       1189         "type": "object",
       1190         "properties": {
       1191           "name": {
       1192             "type": "string",
       1193             "nullable": true
       1194           },
       1195           "description": {
       1196             "type": "string",
       1197             "nullable": true
       1198           },
       1199           "ph": {
       1200             "type": "number",
       1201             "format": "float"
       1202           },
       1203           "size": {
       1204             "type": "number",
       1205             "format": "float"
       1206           },
       1207           "price": {
       1208             "type": "integer",
       1209             "format": "int32"
       1210           }
       1211         },
       1212         "additionalProperties": false
       1213       },
       1214       "CreatePlantModel": {
       1215         "type": "object",
       1216         "properties": {
       1217           "name": {
       1218             "type": "string",
       1219             "nullable": true
       1220           },
       1221           "description": {
       1222             "type": "string",
       1223             "nullable": true
       1224           },
       1225           "minPh": {
       1226             "type": "number",
       1227             "format": "float"
       1228           },
       1229           "maxPh": {
       1230             "type": "number",
       1231             "format": "float"
       1232           },
       1233           "minMoisture": {
       1234             "type": "integer",
       1235             "format": "int32"
       1236           },
       1237           "maxMoisture": {
       1238             "type": "integer",
       1239             "format": "int32"
       1240           }
       1241         },
       1242         "additionalProperties": false
       1243       },
       1244       "CreateReminderModel": {
       1245         "type": "object",
       1246         "properties": {
       1247           "regular": {
       1248             "type": "boolean"
       1249           },
       1250           "reminderDate": {
       1251             "type": "string",
       1252             "format": "date-time"
       1253           },
       1254           "dayGap": {
       1255             "type": "integer",
       1256             "format": "int32",
       1257             "nullable": true
       1258           },
       1259           "deviceId": {
       1260             "type": "integer",
       1261             "format": "int32"
       1262           }
       1263         },
       1264         "additionalProperties": false
       1265       },
       1266       "EditAccountModel": {
       1267         "type": "object",
       1268         "properties": {
       1269           "name": {
       1270             "type": "string",
       1271             "nullable": true
       1272           },
       1273           "surname": {
       1274             "type": "string",
       1275             "nullable": true
       1276           }
       1277         },
       1278         "additionalProperties": false
       1279       },
       1280       "EditCartItmeModel": {
       1281         "type": "object",
       1282         "properties": {
       1283           "fertilizerId": {
       1284             "type": "integer",
       1285             "format": "int32"
       1286           },
       1287           "remind": {
       1288             "type": "boolean"
       1289           },
       1290           "remindAt": {
       1291             "type": "string",
       1292             "format": "date-time",
       1293             "nullable": true
       1294           }
       1295         },
       1296         "additionalProperties": false
       1297       },
       1298       "EditDeviceModel": {
       1299         "type": "object",
       1300         "properties": {
       1301           "id": {
       1302             "type": "integer",
       1303             "format": "int32"
       1304           },
       1305           "name": {
       1306             "type": "string",
       1307             "nullable": true
       1308           },
       1309           "description": {
       1310             "type": "string",
       1311             "nullable": true
       1312           },
       1313           "plantId": {
       1314             "type": "integer",
       1315             "format": "int32",
       1316             "nullable": true
       1317           }
       1318         },
       1319         "additionalProperties": false
       1320       },
       1321       "EditFertilizerModel": {
       1322         "type": "object",
       1323         "properties": {
       1324           "id": {
       1325             "type": "integer",
       1326             "format": "int32"
       1327           },
       1328           "name": {
       1329             "type": "string",
       1330             "nullable": true
       1331           },
       1332           "description": {
       1333             "type": "string",
       1334             "nullable": true
       1335           },
       1336           "ph": {
       1337             "type": "number",
       1338             "format": "float"
       1339           },
       1340           "size": {
       1341             "type": "number",
       1342             "format": "float"
       1343           },
       1344           "price": {
       1345             "type": "integer",
       1346             "format": "int32"
       1347           }
       1348         },
       1349         "additionalProperties": false
       1350       },
       1351       "EditPlantModel": {
       1352         "type": "object",
       1353         "properties": {
       1354           "id": {
       1355             "type": "integer",
       1356             "format": "int32"
       1357           },
       1358           "name": {
       1359             "type": "string",
       1360             "nullable": true
       1361           },
       1362           "description": {
       1363             "type": "string",
       1364             "nullable": true
       1365           },
       1366           "minPh": {
       1367             "type": "number",
       1368             "format": "float"
       1369           },
       1370           "maxPh": {
       1371             "type": "number",
       1372             "format": "float"
       1373           },
       1374           "minMoisture": {
       1375             "type": "integer",
       1376             "format": "int32"
       1377           },
       1378           "maxMoisture": {
       1379             "type": "integer",
       1380             "format": "int32"
       1381           }
       1382         },
       1383         "additionalProperties": false
       1384       },
       1385       "EditReminderModel": {
       1386         "type": "object",
       1387         "properties": {
       1388           "id": {
       1389             "type": "integer",
       1390             "format": "int32"
       1391           },
       1392           "regular": {
       1393             "type": "boolean"
       1394           },
       1395           "reminderDate": {
       1396             "type": "string",
       1397             "format": "date-time"
       1398           },
       1399           "dayGap": {
       1400             "type": "integer",
       1401             "format": "int32",
       1402             "nullable": true
       1403           }
       1404         },
       1405         "additionalProperties": false
       1406       },
       1407       "LoginModel": {
       1408         "type": "object",
       1409         "properties": {
       1410           "email": {
       1411             "type": "string",
       1412             "nullable": true
       1413           },
       1414           "password": {
       1415             "type": "string",
       1416             "nullable": true
       1417           }
       1418         },
       1419         "additionalProperties": false
       1420       },
       1421       "PredictionType": {
       1422         "enum": [
       1423           0,
       1424           1
       1425         ],
       1426         "type": "integer",
       1427         "format": "int32"
       1428       },
       1429       "RegisterModel": {
       1430         "type": "object",
       1431         "properties": {
       1432           "name": {
       1433             "type": "string",
       1434             "nullable": true
       1435           },
       1436           "surname": {
       1437             "type": "string",
       1438             "nullable": true
       1439           },
       1440           "email": {
       1441             "type": "string",
       1442             "nullable": true
       1443           },
       1444           "password": {
       1445             "type": "string",
       1446             "nullable": true
       1447           },
       1448           "confirmPassword": {
       1449             "type": "string",
       1450             "nullable": true
       1451           }
       1452         },
       1453         "additionalProperties": false
       1454       }
       1455     }
       1456   }
       1457 }


ДОДАТОК Д
ПРИКЛАДИ ПРОГРАМНОГО КОДУ
     
       1 namespace GardeningAdviceSystem.Controllers
       2 {
       3     [Route("api/[controller]")]
       4     [ApiController]
       5     public class DeviceController : ControllerBase
       6     {
       7         private readonly UnitOfWork _unitOfWork;
       8         private readonly Repository<Device> _deviceRepository;
       9         private readonly Repository<DeviceLog> _deviceLogRepository;
       10         private readonly UserManager<Account> _userManager;
       11         private readonly ILogger<DeviceController> _logger;
       12 
       13         public DeviceController(UnitOfWork unitOfWork, UserManager<Account> userManager, 
       14             ILogger<DeviceController> logger)
       15         {
       16             _unitOfWork = unitOfWork;
       17             _deviceRepository = unitOfWork.DeviceRepository;
       18             _deviceLogRepository = unitOfWork.DeviceLogRepository;
       19             _userManager = userManager;
       20             _logger = logger;
       21         }
       22 
       23         [HttpPost("create")]
       24         // must be authorized
       25         public async Task<IActionResult> CreateDevise([FromBody] CreateDeviceModel model)
       26         {
       27             if (model == null)
       28             {
       29                 _logger.LogError("Failed to create device - model not received");
       30                 return BadRequest();
       31             }
       32 
       33             var device = new Device()
       34             {
       35                 Name = model.Name,
       36                 Description = model.Description
       37             };
       38 
       39             try
       40             {
       41                 var user = _userManager.Users.FirstOrDefault();
       42                 // will be change to retrieving user from session
       43 
       44                 if (user == null)
       45                 {
       46                     _logger.LogInformation("Failed to create device - user not found");
       47                     return Unauthorized();
       48                 }
       49 
       50                 device.AccountId = user.Id;
       51 
       52                 await _deviceRepository.AddAsync(device);
       53                 await _unitOfWork.Save();
       54 
       55                 // TODO: connect to real device
       56 
       57                 return Ok(device.Id);
       58             }
       59             catch (Exception ex)
       60             {
       61                 _logger.LogError(ex.Message);
       62                 return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
       63             }
       64         }
       65 
       66         [HttpPut("edit")]
       67         // must be authorized
       68         public async Task<IActionResult> EditDevice(EditDeviceModel model)
       69         {
       70             if (model == null)
       71             {
       72                 _logger.LogError("Failed to edit device - model not received");
       73                 return BadRequest();
       74             }
       75 
       76             try
       77             {
       78                 var device = await _deviceRepository.GetByIdAsync(model.Id);
       79 
       80                 if (device == null)
       81                 {
       82                     _logger.LogInformation("Failed to edit device - device not found");
       83                     return NotFound();
       84                 }
       85 
       86                 device.Name = model.Name;
       87                 device.Description = model.Description;
       88                 device.PlantId = model.PlantId;
       89 
       90                 await _deviceRepository.UpdateAsync(device);
       91                 await _unitOfWork.Save();
       92 
       93                 return Ok();
       94             }
       95             catch (Exception ex)
       96             {
       97                 _logger.LogError(ex.Message);
       98                 return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
       99             }
       100         }
       101 
       102         [HttpDelete("delete")]
       103         // must be authorized
       104         public async Task<IActionResult> DeleteDevice(int id)
       105         {
       106             if (id == 0)
       107             {
       108                 _logger.LogError("Failed to delete device - id not received");
       109                 return BadRequest();
       110             }
       111 
       112             try
       113             {
       114                 var device = await _deviceRepository.GetByIdAsync(id);
       115 
       116                 if (device == null)
       117                 {
       118                     _logger.LogInformation("Failed to delete device - device not found");
       119                     return NotFound();
       120                 }
       121 
       122                 await _deviceRepository.DeleteAsync(device);
       123                 await _unitOfWork.Save();
       124 
       125                 return Ok();
       126             }
       127             catch (Exception ex)
       128             {
       129                 _logger.LogError(ex.Message);
       130                 return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
       131             }
       132         }
       133 
       134         [HttpGet]
       135         // must be authorized
       136         // retrieves all devices, created by current user
       137         public async Task<IActionResult> GetDevices()
       138         {
       139             try
       140             {
       141                 var user = _userManager.Users.FirstOrDefault();
       142                 // will be change to retrieving user from session
       143 
       144                 if (user == null)
       145                 {
       146                     _logger.LogInformation("Failed to retrieve devices - user not found");
       147                     return Unauthorized();
       148                 }
       149 
       150                 var models = user.Devices
       151                     .Select(d => new ListItemModel()
       152                     {
       153                         Id = d.Id,
       154                         Name = d.Name
       155                     });
       156 
       157                 return Ok(models);
       158             }
       159             catch (Exception ex)
       160             {
       161                 _logger.LogError(ex.Message);
       162                 return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
       163             }
       164         }
       165 
       166         [HttpGet("{id}")]
       167         // must be authorized
       168         // retrieves all devices, created by current user
       169         public async Task<IActionResult> GetDevice(int id)
       170         {
       171             if (id == 0)
       172             {
       173                 _logger.LogError("Failed to retrieve device - id not received");
       174                 return BadRequest();
       175             }
       176 
       177             try
       178             {
       179                 var device = await _deviceRepository.GetByIdAsync(id);
       180 
       181                 if (device == null)
       182                 {
       183                     _logger.LogInformation("Failed to retrieve device - device not found");
       184                     return NotFound();
       185                 }
       186 
       187                 // check that the plant belongs to current user
       188 
       189                 var model = new DeviceModel()
       190                 {
       191                     Name = device.Name,
       192                     Description = device.Description,
       193                     PlantId = device.PlantId,
       194                     PlantName = device.Plant?.Name
       195                 };
       196 
       197                 return Ok(model);
       198             }
       199             catch (Exception ex)
       200             {
       201                 _logger.LogError(ex.Message);
       202                 return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
       203             }
       204         }
       205 
       206         [HttpPost("log-data")]
       207         public async Task<IActionResult> LogData([FromBody] CreateDeviceLogModel model)
       208         {
       209             if (model == null)
       210             {
       211                 _logger.LogError("Failed to log device data - model not received");
       212                 return BadRequest();
       213             }
       214 
       215             var log = new DeviceLog()
       216             {
       217                 DeviceId = model.DeviceId,
       218                 Ph = model.Ph,
       219                 Moisture = model.Moisture,
       220                 Recorded = DateTime.Now
       221             };
       222 
       223             try
       224             {
       225                 await _deviceLogRepository.AddAsync(log);
       226                 await _unitOfWork.Save();
       227 
       228                 return Ok(log.Id);
       229             }
       230             catch (Exception ex)
       231             {
       232                 _logger.LogError(ex.Message);
       233                 return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
       234             }
       235         }
       236 
       237         [HttpGet("logs/{deviceId}")]
       238         public async Task<IActionResult> GetDeviceLogs(int deviceId)
       239         {
       240             if (deviceId == 0)
       241             {
       242                 _logger.LogError("Failed to retrieve device logs - deviceId not received");
       243                 return BadRequest();
       244             }
       245 
       246             try
       247             {
       248                 var logs = await _deviceLogRepository.GetAsync(l => l.DeviceId == deviceId);
       249 
       250                 if (logs == null)
       251                 {
       252                     _logger.LogInformation("Failed to retrieve device logs - device logs not found");
       253                     return NotFound();
       254                 }
       255 
       256                 var models = logs.Select(l => new DeviceLogModel()
       257                 {
       258                     Recorded = l.Recorded,
       259                     Ph = l.Ph,
       260                     Moisture = l.Moisture
       261                 });
       262 
       263                 return Ok(models);
       264             }
       265             catch (Exception ex)
       266             {
       267                 _logger.LogError(ex.Message);
       268                 return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
       269             }
       270         }
       271 
       272         [HttpGet("predict")]
       273         // must be authorized
       274         // takes the type of prediction (which value is predicted),
       275         // device id, the amount of days to concider for prediction and
       276         // the amount of days into the future to predict for and
       277         // returns the list of values
       278         public async Task<IActionResult> PredictValues(PredictionType type, 
       279             int deviceId, int conciderDays, int forDays)
       280         {
       281             return Ok(0);
       282         }
       283 
       284         [HttpGet("advice-plants")]
       285         // must be authorized
       286         // takes the device id and retrieves it's latest log
       287         // to determine, which plants can pe planted in this soil.
       288         // returns the list of plants' ids
       289         public async Task<IActionResult> AdvicePlants(int deviceId)
       290         {
       291             return Ok(0);
       292         }
       293 
       294         [HttpGet("advice-for-plant")]
       295         // must be authorized
       296         // takes the device id and the plant id
       297         // retrieves the device's latest log
       298         // to determine the difference between the plant's
       299         // requirements and the current state of soil
       300         public async Task<IActionResult> AdviceForPlant(int deviceId, int plantId)
       301         {
       302             return Ok(0);
       303         }
       304     }
       305 }
       
       
       1 namespace DAL
       2 {
       3     public class Repository<T> where T : class
       4     {
       5         private readonly ApplicationContext _context;
       6         private readonly DbSet<T> _dbSet;
       7         private readonly ILogger<Repository<T>> _logger;
       8 
       9         public Repository(ApplicationContext context, ILogger<Repository<T>> logger)
       10         {
       11             _context = context;
       12             _dbSet = _context.Set<T>();
       13             _logger = logger;
       14         }
       15 
       16         public async Task AddAsync(T item)
       17         {
       18             try
       19             {
       20                 _logger.LogInformation("Adding {entityName} to DbSet", typeof(T).Name);
       21 
       22                 await _dbSet.AddAsync(item);
       23 
       24                 _logger.LogInformation("{entityName} added to DbSet successfully!", typeof(T).Name);
       25             }
       26             catch (Exception ex)
       27             {
       28                 _logger.LogError("Failed to add {entityName} to DbSet! Error: {errorMessage}",
       29                     typeof(T).Name, ex.Message);
       30 
       31                 throw new Exception($"Exception message:{ex.Message}");
       32             }
       33         }
       34 
       35         public async Task DeleteAsync(T item)
       36         {
       37             try
       38             {
       39                 _logger.LogInformation("Deleting {entityName} from DbSet", typeof(T).Name);
       40 
       41                 if (_context.Entry(item).State == EntityState.Detached)
       42                 {
       43                     _dbSet.Attach(item);
       44                 }
       45 
       46                 _dbSet.Remove(item);
       47 
       48                 _logger.LogInformation("{entityName} deleted from DbSet successfully!", typeof(T).Name);
       49             }
       50             catch (Exception ex)
       51             {
       52                 _logger.LogError("Failed to delete {entityName} from DbSet! Error: {errorMessage}",
       53                     typeof(T).Name, ex.Message);
       54 
       55                 throw new Exception($"Exception message:{ex.Message}");
       56             }
       57         }
       58 
       59         public async Task UpdateAsync(T item)
       60         {
       61             try
       62             {
       63                 _logger.LogInformation("Updating {entityName}", typeof(T).Name);
       64 
       65                 _dbSet.Attach(item);
       66                 _context.Entry(item).State = EntityState.Modified;
       67 
       68                 _logger.LogInformation("{entityName} updated successfully!", typeof(T).Name);
       69             }
       70             catch (Exception ex)
       71             {
       72                 _logger.LogError("Failed to update {entityName}! Error: {errorMessage}",
       73                     typeof(T).Name, ex.Message);
       74 
       75                 throw new Exception($"Exception message: {ex.Message}");
       76             }
       77         }
       78 
       79         public async Task<T> GetByIdAsync(params object[] ids)
       80         {
       81             try
       82             {
       83                 _logger.LogInformation("Retrieving {entityName}", typeof(T).Name);
       84 
       85                 return await _dbSet.FindAsync(ids);
       86             }
       87             catch (Exception ex)
       88             {
       89                 _logger.LogError("Failed to retrieve {entityName}! Error: {errorMessage}",
       90                     typeof(T).Name, ex.Message);
       91 
       92                 throw new Exception($"Exception message:{ex.Message}");
       93             }
       94         }
       95 
       96         public virtual async Task<List<T>> GetAsync(
       97             Expression<Func<T, bool>> filter = null,
       98             Expression<Func<IQueryable<T>, IOrderedQueryable<T>>> orderBy = null)
       99         {
       100             try
       101             {
       102                 _logger.LogInformation("Retrieving {entityName}s", typeof(T).Name);
       103 
       104                 IQueryable<T> query = _dbSet;
       105 
       106                 if (filter != null)
       107                 {
       108                     query = query.Where(filter);
       109                 }
       110 
       111                 if (orderBy != null)
       112                 {
       113                     return await orderBy.Compile()(query).ToListAsync();
       114                 }
       115                 else
       116                 {
       117                     return await query.ToListAsync();
       118                 }
       119             }
       120             catch (Exception ex)
       121             {
       122                 _logger.LogError("Failed to retrieve {entityName}s! Error: {errorMessage}",
       123                     typeof(T).Name, ex.Message);
       124 
       125                 throw new Exception($"Exception message:{ex.Message}");
       126             }
       127         }
       128     }
       129 }
       
       
       1 namespace DAL
       2 {
       3     public class FileRepository
       4     {
       5         private readonly ILogger<FileRepository> _logger;
       6         private readonly Dictionary<ImageType, string> _folders = new()
       7         {
       8             { ImageType.Plant, "Plants" },
       9             { ImageType.Fertilizer, "Fertilizers" }
       10         };
       11         private readonly string _repositoryPath;
       12 
       13         public FileRepository(ILogger<FileRepository> logger, string repositoryPath)
       14         {
       15             _logger = logger;
       16             _repositoryPath = repositoryPath;
       17         }
       18 
       19         public async Task SaveFileAsync(IFormFile file, ImageType type, string fileName)
       20         {
       21             try
       22             {
       23                 _logger.LogInformation("Saving file {fileName}", fileName);
       24 
       25                 var path = Path.Combine(_repositoryPath, _folders[type]);
       26 
       27                 if (!Directory.Exists(path))
       28                 {
       29                     Directory.CreateDirectory(path);
       30                 }
       31 
       32                 using (var fileStream = new FileStream(Path.Combine(path, fileName), FileMode.Create))
       33                 {
       34                     file.CopyTo(fileStream);
       35                 }
       36 
       37                 _logger.LogInformation("File was saved successfully");
       38             }
       39             catch (Exception ex)
       40             {
       41                 _logger.LogError("Failed to save file {fileName}! Error: {errorMessage}",
       42                     fileName, ex.Message);
       43 
       44                 throw new Exception($"Exception message:{ex.Message}");
       45             }
       46         }
       47 
       48         public async Task DeleteFileAsync(ImageType type, string fileName)
       49         {
       50             try
       51             {
       52                 _logger.LogInformation("Deleting file {fileName}", fileName);
       53 
       54                 var path = Path.Combine(_repositoryPath, _folders[type], fileName);
       55 
       56                 if (File.Exists(path))
       57                 {
       58                     File.Delete(path);
       59                 }
       60 
       61                 _logger.LogInformation("File was deleted successfully");
       62             }
       63             catch (Exception ex)
       64             {
       65                 _logger.LogError("Failed to delete file {fileName}! Error: {errorMessage}",
       66                     fileName, ex.Message);
       67 
       68                 throw new Exception($"Exception message:{ex.Message}");
       69             }
       70         }
       71 
       72         public async Task<byte[]> ReadFileAsync(ImageType type, string fileName)
       73         {
       74             try
       75             {
       76                 _logger.LogInformation("Retrieving file {fileName}", fileName);
       77 
       78                 var path = Path.Combine(_repositoryPath, _folders[type]);
       79 
       80                 if (!Directory.Exists(path))
       81                 {
       82                     return null;
       83                 }
       84 
       85                 var filePath = Path.Combine(path, fileName);
       86                 if (!File.Exists(filePath))
       87                 {
       88                     return null;
       89                 }
       90 
       91                 using var stream = new FileStream(filePath, FileMode.Open, FileAccess.Read);
       92                 using var ms = new MemoryStream();
       93 
       94                 stream.CopyTo(ms);
       95 
       96                 _logger.LogInformation("File was retrieved successfully");
       97 
       98                 return ms.ToArray();
       99             }
       100             catch (Exception ex)
       101             {
       102                 _logger.LogError("Failed to retrieve file {fileName}! Error: {errorMessage}",
       103                     fileName, ex.Message);
       104 
       105                 throw new Exception($"Exception message:{ex.Message}");
       106             }
       107         }
       108     }
       109 }


ДОДАТОК Е
ВІДЕО НА ЮТУБ

       https://youtu.be/RJbrnB-f4Q0 

2


